# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @extends on OBJECT | INTERFACE

directive @external on FIELD_DEFINITION

directive @key(fields: _FieldSet!) on OBJECT | INTERFACE

directive @provides(fields: _FieldSet!) on FIELD_DEFINITION

directive @requires(fields: _FieldSet!) on FIELD_DEFINITION

type CommercialServiceProvider {
    country: String!
    cspName: String!
}

type DeliveryDetails {
    careOf: String
    city: String
    country: String
    deliveryMethod: DeliveryMethod
    door: String
    emailAddress: String
    firstName: String
    floor: String
    lastName: String
    phoneNumber: String
    postalCode: String
    street: String
    streetNumber: String
}

"Deprecated, all props are on ProductOrderFulfillment instead"
type IncomingOrderHead {
    commercialServiceProvider: CommercialServiceProvider
    deliveryDetails: DeliveryDetails
    orderReference: String
    paymentRef: PaymentRef
    seller: Seller
}

"Deprecated, all props are on ProductOrderFulfillmentItem instead"
type IncomingOrderItem {
    crmOrderId: String
    id: ID!
    installment: Installment
    itemCategory: ItemCategory
    itemType: ItemType
    name: String
    paymentMethod: PaymentMethod
    prices: Prices
    productId: String
}

type Installment {
    paymentPlan: PaymentPlan
    taxpayerId: String
}

type InstallmentPlan {
    crmOrderId: String
    crmServiceId: String
    customerAccountId: String
    hardwareInstallmentPlanId: String
    hardwareInstallmentPlanPeriodId: String
    id: ID!
    installmentPlanItems: [InstallmentPlanItem!]!
    installmentPlanType: String!
    period: String!
    productOrderFulfillments: ProductOrderFulfillment!
    sellerId: String!
    status: String!
    statusTransitions: [StatusTransition!]!
    taxpayerId: String!
    workerId: String
}

type InstallmentPlanItem {
    chargeProductId: String
    installmentPlan: InstallmentPlan!
    periodicAmount: Float
    productOrderFulfillmentItem: ProductOrderFulfillmentItem
}

type Mutation {
    cancelProductOrderFulfillment(fulfillmentId: ID!): MutationResult!
    retryProductOrderFulfillment(fulfillmentId: ID!): MutationResult!
}

type MutationResult {
    id: ID!
    message: String!
    success: Boolean!
}

type PaymentPlan {
    period: String
    periodicAmount: Float
}

type PaymentRef {
    value: String!
}

type Price {
    currencyCode: CurrencyCode
    priceExclVat: Float
    priceInclVat: Float
    vatAmount: Float
    vatPercentage: Int
}

type Prices {
    originalPrice: Price
    sellingPrice: Price
    standardPrice: Price
}

type ProductOrderFulfillment {
    contractUrl: String
    created: String!
    crmId: String
    erpId: String
    id: ID!
    incomingOrderHead: IncomingOrderHead! @deprecated(reason: "Use corresponding properties in ProductOrderFulfillments instead")
    installmentPlans: [InstallmentPlan!]!
    isCancellable: Boolean
    pickedUpDate: String
    productOrderFulfillmentItems: [ProductOrderFulfillmentItem!]!
    shippingDate: String
    status: String!
    statusTransitions: [StatusTransition!]!
    trackingId: String
    upfrontPayment: UpfrontPayment
}

type ProductOrderFulfillmentItem {
    id: ID!
    incomingOrderItem: IncomingOrderItem @deprecated(reason: "No longer supported")
    itemCategory: ItemCategory
    itemType: ItemType
    name: String
    paymentMethod: PaymentMethod
    prices: Prices
    "Use corresponding properties on ProductOrderFulfillmentItem instead"
    productId: String
    serialNumber: String
}

"""

#
# Product order types
#
"""
type ProductOrderFulfillments {
    commercialServiceProvider: CommercialServiceProvider
    deliveryDetails: DeliveryDetails
    incomingOrderJson: String! @deprecated(reason: "Use corresponding properties in ProductOrderFulfillments instead")
    orderReference: String!
    paymentRef: PaymentRef
    productOrderFulfillments: [ProductOrderFulfillment!]!
    seller: Seller
}

type Query {
    _service: _Service
    fetchAllCurrentProductOrderFulfillmentStatuses: [String!]!
    fetchProductOrder(orderReference: String!): ProductOrderFulfillments!
    fetchReturnOrder(returnRef: String!): ReturnOrder!
    searchProductOrders(createdFrom: DateTime, createdTo: DateTime, crmServiceId: String, deliveryEmailAddress: String, deliveryPhoneNumber: String, erpId: String, fulfillmentId: String, fulfillmentItemId: String, orderReference: String, pagination: Pagination, paymentRef: String, status: String, taxpayerId: String): [ProductOrderFulfillments!]!
    searchReturnOrders(productOrderRef: String): [ReturnOrder!]!
}

"""

#
# Return order types
#
"""
type ReturnOrder {
    incomingOrderJson: String!
    orderRef: String!
    returnOrderFulfillment: ReturnOrderFulfillment!
    returnRef: String!
}

type ReturnOrderFulfillment {
    orderRef: String!
    returnOrderFulfillmentItems: [ReturnOrderFulfillmentItem!]!
    returnRef: String!
    status: String!
    statusTransitions: [StatusTransition!]!
}

type ReturnOrderFulfillmentItem {
    productOrderFulfillmentItemId: ID!
    returnValue: Price
}

type Seller {
    channelId: String!
    costCenter: String!
    id: String!
    name: String!
}

type StatusTransition {
    id: ID!
    initiator: String
    initiatorDescription: String
    message: String
    status: String!
    timestamp: String @deprecated(reason: "use initiator")
}

type UpfrontPayment {
    id: ID!
    paymentRef: PaymentRef!
    status: String!
    statusTransitions: [StatusTransition!]!
}

type _Service {
    sdl: String!
}

enum CurrencyCode {
    DKK
    SEK
}

enum DeliveryMethod {
    HOME_DELIVERY
    MAIL
    POST_OFFICE_COLLECTION
}

enum ErrorDetail {
    """

    The deadline expired before the operation could complete.

    For operations that change the state of the system, this error
    may be returned even if the operation has completed successfully.
    For example, a successful response from a server could have been
    delayed long enough for the deadline to expire.

    HTTP Mapping: 504 Gateway Timeout
    Error Type: UNAVAILABLE
    """
    DEADLINE_EXCEEDED
    """

    The server detected that the client is exhibiting a behavior that
    might be generating excessive load.

    HTTP Mapping: 429 Too Many Requests or 420 Enhance Your Calm
    Error Type: UNAVAILABLE
    """
    ENHANCE_YOUR_CALM
    """

    The requested field is not found in the schema.

    This differs from `NOT_FOUND` in that `NOT_FOUND` should be used when a
    query is valid, but is unable to return a result (if, for example, a
    specific video id doesn't exist). `FIELD_NOT_FOUND` is intended to be
    returned by the server to signify that the requested field is not known to exist.
    This may be returned in lieu of failing the entire query.
    See also `PERMISSION_DENIED` for cases where the
    requested field is invalid only for the given user or class of users.

    HTTP Mapping: 404 Not Found
    Error Type: BAD_REQUEST
    """
    FIELD_NOT_FOUND
    """

    The client specified an invalid argument.

    Note that this differs from `FAILED_PRECONDITION`.
    `INVALID_ARGUMENT` indicates arguments that are problematic
    regardless of the state of the system (e.g., a malformed file name).

    HTTP Mapping: 400 Bad Request
    Error Type: BAD_REQUEST
    """
    INVALID_ARGUMENT
    """

    The provided cursor is not valid.

    The most common usage for this error is when a client is paginating
    through a list that uses stateful cursors. In that case, the provided
    cursor may be expired.

    HTTP Mapping: 404 Not Found
    Error Type: NOT_FOUND
    """
    INVALID_CURSOR
    """

    Unable to perform operation because a required resource is missing.

    Example: Client is attempting to refresh a list, but the specified
    list is expired. This requires an action by the client to get a new list.

    If the user is simply trying GET a resource that is not found,
    use the NOT_FOUND error type. FAILED_PRECONDITION.MISSING_RESOURCE
    is to be used particularly when the user is performing an operation
    that requires a particular resource to exist.

    HTTP Mapping: 400 Bad Request or 500 Internal Server Error
    Error Type: FAILED_PRECONDITION
    """
    MISSING_RESOURCE
    """

    Service Error.

    There is a problem with an upstream service.

    This may be returned if a gateway receives an unknown error from a service
    or if a service is unreachable.
    If a request times out which waiting on a response from a service,
    `DEADLINE_EXCEEDED` may be returned instead.
    If a service returns a more specific error Type, the specific error Type may
    be returned instead.

    HTTP Mapping: 502 Bad Gateway
    Error Type: UNAVAILABLE
    """
    SERVICE_ERROR
    """

    Request failed due to network errors.

    HTTP Mapping: 503 Unavailable
    Error Type: UNAVAILABLE
    """
    TCP_FAILURE
    """

    Request throttled based on server concurrency limits.

    HTTP Mapping: 503 Unavailable
    Error Type: UNAVAILABLE
    """
    THROTTLED_CONCURRENCY
    """

    Request throttled based on server CPU limits

    HTTP Mapping: 503 Unavailable.
    Error Type: UNAVAILABLE
    """
    THROTTLED_CPU
    """

    The operation is not implemented or is not currently supported/enabled.

    HTTP Mapping: 501 Not Implemented
    Error Type: BAD_REQUEST
    """
    UNIMPLEMENTED
    """

    Unknown error.

    This error should only be returned when no other error detail applies.
    If a client sees an unknown errorDetail, it will be interpreted as UNKNOWN.

    HTTP Mapping: 500 Internal Server Error
    """
    UNKNOWN
}

enum ErrorType {
    """

    Bad Request.

    There is a problem with the request.
    Retrying the same request is not likely to succeed.
    An example would be a query or argument that cannot be deserialized.

    HTTP Mapping: 400 Bad Request
    """
    BAD_REQUEST
    """

    The operation was rejected because the system is not in a state
    required for the operation's execution.  For example, the directory
    to be deleted is non-empty, an rmdir operation is applied to
    a non-directory, etc.

    Service implementers can use the following guidelines to decide
    between `FAILED_PRECONDITION` and `UNAVAILABLE`:

    - Use `UNAVAILABLE` if the client can retry just the failing call.
    - Use `FAILED_PRECONDITION` if the client should not retry until
    the system state has been explicitly fixed.  E.g., if an "rmdir"
    fails because the directory is non-empty, `FAILED_PRECONDITION`
    should be returned since the client should not retry unless
    the files are deleted from the directory.

    HTTP Mapping: 400 Bad Request or 500 Internal Server Error
    """
    FAILED_PRECONDITION
    """

    Internal error.

    An unexpected internal error was encountered. This means that some
    invariants expected by the underlying system have been broken.
    This error code is reserved for serious errors.

    HTTP Mapping: 500 Internal Server Error
    """
    INTERNAL
    """

    The requested entity was not found.

    This could apply to a resource that has never existed (e.g. bad resource id),
    or a resource that no longer exists (e.g. cache expired.)

    Note to server developers: if a request is denied for an entire class
    of users, such as gradual feature rollout or undocumented allowlist,
    `NOT_FOUND` may be used. If a request is denied for some users within
    a class of users, such as user-based access control, `PERMISSION_DENIED`
    must be used.

    HTTP Mapping: 404 Not Found
    """
    NOT_FOUND
    """

    The caller does not have permission to execute the specified
    operation.

    `PERMISSION_DENIED` must not be used for rejections
    caused by exhausting some resource or quota.
    `PERMISSION_DENIED` must not be used if the caller
    cannot be identified (use `UNAUTHENTICATED`
    instead for those errors).

    This error Type does not imply the
    request is valid or the requested entity exists or satisfies
    other pre-conditions.

    HTTP Mapping: 403 Forbidden
    """
    PERMISSION_DENIED
    """

    The request does not have valid authentication credentials.

    This is intended to be returned only for routes that require
    authentication.

    HTTP Mapping: 401 Unauthorized
    """
    UNAUTHENTICATED
    """

    Currently Unavailable.

    The service is currently unavailable.  This is most likely a
    transient condition, which can be corrected by retrying with
    a backoff.

    HTTP Mapping: 503 Unavailable
    """
    UNAVAILABLE
    """

    Unknown error.

    For example, this error may be returned when
    an error code received from another address space belongs to
    an error space that is not known in this address space.  Also
    errors raised by APIs that do not return enough error information
    may be converted to this error.

    If a client sees an unknown errorType, it will be interpreted as UNKNOWN.
    Unknown errors MUST NOT trigger any special behavior. These MAY be treated
    by an implementation as being equivalent to INTERNAL.

    When possible, a more specific error should be provided.

    HTTP Mapping: 520 Unknown Error
    """
    UNKNOWN
}

enum ItemCategory {
    HARDWARE
    SUBSCRIPTION
}

enum ItemType {
    ACCESSORY
    DATA
    DEVICE
    VOICE
}

enum PaymentMethod {
    CREDIT_CARD
    INVOICE
    MOBILE_PAY
}

"An RFC-3339 compliant DateTime Scalar"
scalar DateTime

scalar _FieldSet

input Pagination {
    offset: Int = 0
    pageSize: Int = 25
}
